// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package renderror

import (
	"github.com/ONSdigital/dp-renderer/v2/model"
	"io"
	"sync"
)

var (
	lockRenderClientMockBuildHTML sync.RWMutex
	lockRenderClientMockSetError  sync.RWMutex
)

// Ensure, that RenderClientMock does implement RenderClient.
// If this is not the case, regenerate this file with moq.
var _ RenderClient = &RenderClientMock{}

// RenderClientMock is a mock implementation of RenderClient.
//
//     func TestSomethingThatUsesRenderClient(t *testing.T) {
//
//         // make and configure a mocked RenderClient
//         mockedRenderClient := &RenderClientMock{
//             BuildHTMLFunc: func(w io.Writer, status int, templateName string, pageModel interface{}) error {
// 	               panic("mock out the BuildHTML method")
//             },
//             SetErrorFunc: func(w io.Writer, status int, errorModel model.ErrorResponse) error {
// 	               panic("mock out the SetError method")
//             },
//         }
//
//         // use mockedRenderClient in code that requires RenderClient
//         // and then make assertions.
//
//     }
type RenderClientMock struct {
	// BuildHTMLFunc mocks the BuildHTML method.
	BuildHTMLFunc func(w io.Writer, status int, templateName string, pageModel interface{}) error

	// SetErrorFunc mocks the SetError method.
	SetErrorFunc func(w io.Writer, status int, errorModel model.ErrorResponse) error

	// calls tracks calls to the methods.
	calls struct {
		// BuildHTML holds details about calls to the BuildHTML method.
		BuildHTML []struct {
			// W is the w argument value.
			W io.Writer
			// Status is the status argument value.
			Status int
			// TemplateName is the templateName argument value.
			TemplateName string
			// PageModel is the pageModel argument value.
			PageModel interface{}
		}
		// SetError holds details about calls to the SetError method.
		SetError []struct {
			// W is the w argument value.
			W io.Writer
			// Status is the status argument value.
			Status int
			// ErrorModel is the errorModel argument value.
			ErrorModel model.ErrorResponse
		}
	}
}

// BuildHTML calls BuildHTMLFunc.
func (mock *RenderClientMock) BuildHTML(w io.Writer, status int, templateName string, pageModel interface{}) error {
	if mock.BuildHTMLFunc == nil {
		panic("RenderClientMock.BuildHTMLFunc: method is nil but RenderClient.BuildHTML was just called")
	}
	callInfo := struct {
		W            io.Writer
		Status       int
		TemplateName string
		PageModel    interface{}
	}{
		W:            w,
		Status:       status,
		TemplateName: templateName,
		PageModel:    pageModel,
	}
	lockRenderClientMockBuildHTML.Lock()
	mock.calls.BuildHTML = append(mock.calls.BuildHTML, callInfo)
	lockRenderClientMockBuildHTML.Unlock()
	return mock.BuildHTMLFunc(w, status, templateName, pageModel)
}

// BuildHTMLCalls gets all the calls that were made to BuildHTML.
// Check the length with:
//     len(mockedRenderClient.BuildHTMLCalls())
func (mock *RenderClientMock) BuildHTMLCalls() []struct {
	W            io.Writer
	Status       int
	TemplateName string
	PageModel    interface{}
} {
	var calls []struct {
		W            io.Writer
		Status       int
		TemplateName string
		PageModel    interface{}
	}
	lockRenderClientMockBuildHTML.RLock()
	calls = mock.calls.BuildHTML
	lockRenderClientMockBuildHTML.RUnlock()
	return calls
}

// SetError calls SetErrorFunc.
func (mock *RenderClientMock) SetError(w io.Writer, status int, errorModel model.ErrorResponse) error {
	if mock.SetErrorFunc == nil {
		panic("RenderClientMock.SetErrorFunc: method is nil but RenderClient.SetError was just called")
	}
	callInfo := struct {
		W          io.Writer
		Status     int
		ErrorModel model.ErrorResponse
	}{
		W:          w,
		Status:     status,
		ErrorModel: errorModel,
	}
	lockRenderClientMockSetError.Lock()
	mock.calls.SetError = append(mock.calls.SetError, callInfo)
	lockRenderClientMockSetError.Unlock()
	return mock.SetErrorFunc(w, status, errorModel)
}

// SetErrorCalls gets all the calls that were made to SetError.
// Check the length with:
//     len(mockedRenderClient.SetErrorCalls())
func (mock *RenderClientMock) SetErrorCalls() []struct {
	W          io.Writer
	Status     int
	ErrorModel model.ErrorResponse
} {
	var calls []struct {
		W          io.Writer
		Status     int
		ErrorModel model.ErrorResponse
	}
	lockRenderClientMockSetError.RLock()
	calls = mock.calls.SetError
	lockRenderClientMockSetError.RUnlock()
	return calls
}
